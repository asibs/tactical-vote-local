import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useState } from 'react'
import axios from 'axios'

import { AddressData } from '../../types'

export default function Home() {
  const STATE_LOOKUP_POSTCODE = 'LOOKUP_POSTCODE'
  const STATE_SELECT_ADDRESS = 'SELECT_ADDRESS'
  const STATE_FOUND_WARD = 'FOUND_WARD'
  const STATE_ERROR = 'ERROR'
  const [state, setState] = useState(STATE_LOOKUP_POSTCODE)

  const [postcode, setPostcode] = useState('')
  const [addresses, setAddresses] = useState<Array<AddressData>>([])
  const [selectedAddress, setSelectedAddress] = useState('')
  const [featuredBallot, setFeaturedBallot] = useState<Ballot>(undefined) // Probs don't need this anymore

  const router = useRouter()

  const lookupAddress = () => {
    axios.get('/api/postcodeLookup', {
      params: {
        postcode: postcode,
        addressSlug: selectedAddress,
      }
    }).then(function (response) {
      console.log("Success", response.data)

      if (response.data.addressPicker) {
        console.log("Got some addresses!", response.data.addresses)
        setAddresses(response.data.addresses)
        setState(STATE_SELECT_ADDRESS)
      } else if (response.data.featuredBallot) {
        console.log("Found the ward & ballot!", response.data.featuredBallot)
        // Redirect to the council/ward page
        const regexp = new RegExp(`[^\.]+\.([^\.]+)\.([^\.]+)\.[^\.]+`)
        const matches = regexp.exec(response.data.featuredBallot.ballotPaperId)
        console.log(`Redirecting to /council/${matches[1]}/${matches[2]}`)
        router.push(`/council/${matches[1]}/${matches[2]}`)
        // TODO: pass on otherBallots as a URL param so they can be shown as well as the local election?
      } else {
        // Found the ward, but no featuredBallot
        console.log("Found the ward with no ballot!")
        setFeaturedBallot(response.data.featuredBallot)
        setState(STATE_FOUND_WARD)
      }
    }).catch(function(err) {
      console.log("ERROR", err)
      setState(STATE_ERROR)
    })
  }

  return (
    <>
      <Head>
        <title>Local Tactical Voting</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Local Tactical Voting</h1>

        {[STATE_LOOKUP_POSTCODE, STATE_ERROR].includes(state) && (
          <div className="input-group input-group-lg mb-3">
            <div className="container">
              <div className="row">
                <div className="col">
                  <label htmlFor="postcodeInput" className="form-label">Enter your postcode:</label>
                </div>
              </div>
              <div className="row gx-0">
                <div className="col">
                  <input
                    type="email"
                    className="form-control"
                    id="postcodeInput"
                    placeholder="SW1A 1AA"
                    value={postcode}
                    onChange={(e) => setPostcode(e.target.value)}
                  />
                </div>
                <div className="col">
                  <button
                    type="button"
                    className="btn btn-success"
                    onClick={() => lookupAddress()}
                  >
                    Go »
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {state === STATE_SELECT_ADDRESS && (
          <div className="input-group input-group-lg mb-3">
            <div className="container">
              <div className="row">
                <div className="col">
                  <label htmlFor="addressInput" className="form-label">Select your address:</label>
                </div>
              </div>
              <div className="row gx-0">
                <div className="col">
                  <select
                    id="addressInput"
                    className="form-select"
                    value={selectedAddress}
                    onChange={(e) => setSelectedAddress(e.target.value)}
                  >
                    {addresses.map(address => {
                      return (
                        <option key={address.slug} value={address.slug}>{address.address}</option>
                      )
                    })}
                  </select>
                </div>
                <div className="col">
                  <button
                    type="button"
                    className="btn btn-success"
                    onClick={() => lookupAddress()}
                  >
                    Go »
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {state === STATE_FOUND_WARD && (
          <>
            {featuredBallot ? (
              <p>Looks like you have an election: {featuredBallot.ballotTitle}</p>
            ) : (
              <p>Looks like you don't have an upcoming election</p>
            )}
          </>
        )}
      </main>
    </>
  )
}
